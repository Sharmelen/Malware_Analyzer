import math
import numpy as np
import os
import matplotlib.pyplot as plt
from random import sample
import matplotlib.colors as pltc

def multiple_sample(dir):

    v = open('report_gen/ent_mult.txt','w+')
    v = open('report_gen/ent_mult.txt','r+')
    v.truncate(0)
    v = open('report_gen/ent_mult.txt','a+')

    #path = input('File Path of Samples :')
    path = dir
    samples = os.listdir(path)

    fd = []

    for x in range (len(samples)):
        full_dir = path + samples[x]
        fd.append(full_dir)


    tot_ent = []
    tot_samp = []
    for y in range (len(fd)):
        f = open(fd[y],'rb')
        byteArr = f.read()
        f.close()
        fileSize = len(byteArr)

        # calculate the frequency of each byte value in the file
        freqList = []
        for b in range(256):
            ctr = 0
            for byte in byteArr:
                if byte == b:
                    ctr += 1
            freqList.append(float(ctr) / fileSize)
        # print 'Frequencies of each byte-character:'
        # print freqList
        # print

        # Shannon entropy
        ent = 0.0
        for freq in freqList:
            if freq > 0:
                ent = ent + freq * math.log(freq, 2)
        ent = -ent
        v.write('Sample Name:'+str(samples[y])+'\r\n')
        #print('Sample Name:'+samples[y])
        v.write('Shannon entropy (min bits per byte-character): '+str(ent)+"\r\n")
        #print('Shannon entropy (min bits per byte-character):')
        #print(ent)
        tot_ent.append(ent)
        tot_samp.append(samples[y])
        v.write(':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\r\n')

    x = tot_samp
    energy = tot_ent


    below_2 = []
    below_3 = []
    below_4 = []
    below_5 = []
    below_6 = []
    more_6 = []

    for x in range(len(energy)):
        if energy[x] < 2:
            below_2.append(energy[x])
        if energy[x] < 3 and energy[x] >1:
            below_3.append(energy[x])
        if energy[x] < 4 and energy[x] > 2:
            below_4.append(energy[x])
        if energy[x] < 5 and energy[x] >3:
            below_5.append(energy[x])
        if energy[x] < 6 and energy[x] > 4:
            below_6.append(energy[x])
        else:
            more_6.append(energy[x])

    data = [len(below_2),len(below_3),len(below_4),len(below_5),len(below_6),len(more_6)]
    labels = ['x < 1','1 < x < 3','2 < x < 4','3 < x < 5','4 < x < 6','x > 6']
    plt.xticks(range(len(data)), labels)
    plt.xticks(rotation=0,fontsize='9')
    plt.ylabel('Number of Malwares')
    plt.xlabel('Entropy Score Range')
    plt.title('Samples With Same Compilation Year')
    plt.bar(range(len(data)), data)
    plt.savefig('report_gen/mult_ent.png',bbox_inches='tight',dpi=1000)
    plt.close(1)


def single_sample(sing_dir):
    v = open('report_gen/ent_sing.txt','w+')
    v = open('report_gen/ent_sing.txt','r+')
    v.truncate(0)
    v = open('report_gen/ent_sing.txt','a+')

    # read the whole file into a byte array
    #dir = input('Sample Target :')
    dir = sing_dir
    try:
        name = dir.split('/')
        v.write('File Name:'+str(name[-1])+'<br>\r\n')
    except:
        print
    f = open(dir, "rb")
    byteArr = f.read()
    f.close()
    fileSize = len(byteArr)
    v.write('File size in bytes:'+str(fileSize)+'<br>\r\n')

    # calculate the frequency of each byte value in the file
    freqList = []
    for b in range(256):
        ctr = 0
        for byte in byteArr:
            if byte == b:
                ctr += 1
        freqList.append(float(ctr) / fileSize)
    # print 'Frequencies of each byte-character:'
    # print freqList
    # print

    # Shannon entropy
    ent = 0.0
    for freq in freqList:
        if freq > 0:
            ent = ent + freq * math.log(freq, 2)
    ent = -ent
    v.write('Shannon entropy (min bits per byte-character): '+str(ent)+'<br>\r\n')

    v.write('Min possible file size assuming max theoretical compression efficiency:\r\n')

    v.write(str((ent * fileSize))+' in bits <br>\r\n')

    v.write(str((ent * fileSize) / 8)+' in bytes <br>\r\n')



    N = len(freqList)

    ind = np.arange(N)  # the x locations for the groups
    width = 1.00        # the width of the bars


    fig = plt.figure(figsize=(11,5),dpi=100)
    ax = fig.add_subplot(111)
    rects1 = ax.bar(ind, freqList, width)
    ax.set_autoscalex_on(False)
    ax.set_xlim([0,255])

    ax.set_ylabel('Frequency')
    ax.set_xlabel('Byte')
    ax.set_title('Frequency of Bytes 0 to 255')

    plt.savefig('report_gen/ent_sing.png',bbox_inches='tight',dpi=1000)
    plt.close(1)
