import math
import numpy as np
import os
import matplotlib.pyplot as plt
from random import sample
import matplotlib.colors as pltc

def multiple_sample():
    path = input('File Path of Samples :')
    samples = os.listdir(path)

    fd = []

    for x in range (len(samples)):
        full_dir = path + samples[x]
        fd.append(full_dir)


    tot_ent = []
    tot_samp = []
    for y in range (len(fd)):
        f = open(fd[y],'rb')
        byteArr = f.read()
        f.close()
        fileSize = len(byteArr)


        # calculate the frequency of each byte value in the file
        freqList = []
        for b in range(256):
            ctr = 0
            for byte in byteArr:
                if byte == b:
                    ctr += 1
            freqList.append(float(ctr) / fileSize)
        # print 'Frequencies of each byte-character:'
        # print freqList
        # print

        # Shannon entropy
        ent = 0.0
        for freq in freqList:
            if freq > 0:
                ent = ent + freq * math.log(freq, 2)
        ent = -ent
        print('Shannon entropy (min bits per byte-character):')
        print(ent)
        tot_ent.append(ent)
        tot_samp.append(samples[y])
        print(':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::')




    x = tot_samp
    energy = tot_ent


    below_2 = []
    below_3 = []
    below_4 = []
    below_5 = []
    below_6 = []
    more_6 = []

    for x in range(len(energy)):
        if energy[x] < 2:
            below_2.append(energy[x])
        if energy[x] < 3 and energy[x] >1:
            below_3.append(energy[x])
        if energy[x] < 4 and energy[x] > 2:
            below_4.append(energy[x])
        if energy[x] < 5 and energy[x] >3:
            below_5.append(energy[x])
        if energy[x] < 6 and energy[x] > 4:
            below_6.append(energy[x])
        else:
            more_6.append(energy[x])

    all_colors = [k for k,v in pltc.cnames.items()]
    percent_score = [len(below_2),len(below_3),len(below_4),len(below_5),len(below_6),len(more_6)]
    fracs = np.array(percent_score)
    labels = ['x < 1','1 < x < 3','2 < x < 4','3 < x < 5','4 < x < 6','x > 6']

    explode = ((fracs == max(fracs)).astype(int) / 20).tolist()

    for val in range(1):
        colors = sample(all_colors, len(fracs))
        plt.figure(figsize=(8,8))
        plt.pie(fracs, autopct='%1.1f%%',
                shadow=True, explode=explode, colors=colors)
        plt.title('Percentage of Shannon Entropy Score Range')
        plt.legend(labels, loc=(1.00, 0.7), shadow=True, title = 'Entropy Score Range')
        plt.show()


def single_sample():
    # read the whole file into a byte array
    dir = input('File Path of Samples :')
    f = open(dir, "rb")
    byteArr = f.read()
    f.close()
    fileSize = len(byteArr)
    print ('File size in bytes:' )
    print (fileSize )
    print

    # calculate the frequency of each byte value in the file
    freqList = []
    for b in range(256):
        ctr = 0
        for byte in byteArr:
            if byte == b:
                ctr += 1
        freqList.append(float(ctr) / fileSize)
    # print 'Frequencies of each byte-character:'
    # print freqList
    # print

    # Shannon entropy
    ent = 0.0
    for freq in freqList:
        if freq > 0:
            ent = ent + freq * math.log(freq, 2)
    ent = -ent
    print( 'Shannon entropy (min bits per byte-character):' )
    print (ent )
    print
    print ('Min possible file size assuming max theoretical compression efficiency:' )
    print ((ent * fileSize), 'in bits' )
    print ((ent * fileSize) / 8, 'in bytes' )




    N = len(freqList)

    ind = np.arange(N)  # the x locations for the groups
    width = 1.00        # the width of the bars

    #fig = plt.figure()
    fig = plt.figure(figsize=(11,5),dpi=100)
    ax = fig.add_subplot(111)
    rects1 = ax.bar(ind, freqList, width)
    ax.set_autoscalex_on(False)
    ax.set_xlim([0,255])

    ax.set_ylabel('Frequency')
    ax.set_xlabel('Byte')
    ax.set_title('Frequency of Bytes 0 to 255')

    plt.show()

#multiple_sample()
#single_sample()
