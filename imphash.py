import pefile
import hashlib
from itertools import groupby
import os
import numpy as np
from random import sample
import matplotlib.pyplot as plt
import matplotlib.colors as pltc


def imphash():
    dirs = input('File Path of Samples :')
    samples = os.listdir(dirs)

    full_dir = []
    for x in range (len(samples)):
        full_dir.append(dirs+str(samples[x]))
    #print(full_dir)
    imports = []

    file = []
    for y in range(len(full_dir)):
        subs = []
        try:
            pe = pefile.PE(str(full_dir[y]))

            for entry in pe.DIRECTORY_ENTRY_IMPORT:

                subs.append(entry.dll.decode('utf-8'))
            file.append(samples[y])
            imports.append(subs)
        except:
            print

    imphash = []

    for z in range (len(imports)):

        imports[z] = ''.join(imports[z])
        #imphash = hash(str(imports[z]).encode('utf-8'))
        hashes = hashlib.md5(str(imports[z]).encode('utf-8')).hexdigest()
        imphash.append(hashes)
    #print(imphash)

    dict = {}
    for j in range (len(file)):
        dict.update({file[j]:imphash[j]})



    # finding duplicate values
    # from dictionary using flip
    flipped = {}

    for key, value in dict.items():
        if value not in flipped:
            flipped[value] = [key]
        else:
            flipped[value].append(key)

    total_hash = []
    grouped_sample = []
    total_sample = []
    for t in range (len(list(flipped))):
        hash_val = list(flipped)[t]
        total_hash.append(hash_val)
        grouped_sample.append(flipped[hash_val])
        total_sample.append(len(flipped[hash_val]))



    group_num = []
    for x in range (len(grouped_sample)):


        group_num.append("Group "+str(x))

        print(group_num[x])
        print("Imphash Value: "+list(flipped)[x])
        for j in range (len(grouped_sample[x])):
            print(grouped_sample[x][j])
        print("####################################################################")
    labels = group_num

    data = total_sample

    plt.xticks(range(len(data)), labels)
    plt.xlabel('Class')
    plt.xticks(rotation=40,fontsize='9')
    plt.ylabel('Total Sample With Same Imphash')
    plt.xlabel('Groups of Malware')
    plt.title('Samples With Same Imphash')
    plt.bar(range(len(data)), data)
    plt.show()

#imphash()
