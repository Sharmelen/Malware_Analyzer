import os
from random import sample
import matplotlib.pyplot as plt
import matplotlib.colors as pltc
import re
import numpy as np
import tlsh
from itertools import combinations
import shutil


def ssdeep(dir):
    #dir = input('File Path of Samples :')
    com_one ='ssdeep '+ dir+'* > hashes.ssd'
    com_two = 'ssdeep -m hashes.ssd '+dir+'* > result.txt'
    shutil.copyfile('result.txt','report_gen/result.txt')

    os.system(com_one)
    os.system(com_two)

    text = open('result.txt','r')
    whole_text = text.read()
    raw_elements = whole_text.splitlines()
    len_elements = len(whole_text.splitlines())

    for x in range (len_elements):
        try:
            if raw_elements[x] == '' :
                raw_elements.pop(x)

        except:
            print

    true_result = raw_elements

    value_1 = []
    value_2 = []
    value_3 = []

    below_11 = []
    below_21 = []
    below_31 = []
    below_41 = []
    below_51 = []
    below_61 = []
    below_71 = []
    below_81 = []
    below_91 = []
    below_101 = []

    for y in range (len(true_result)):

        phase_1 = true_result[y]
        phase_2 = phase_1.split('matches')
        value_1.append(phase_2[0].strip(dir))
        phase_3 = phase_2[1].split()
        value_2.append(phase_3[0].strip(dir))
        phase_4 = str(phase_3[1].split(' ')).strip("['()']")
        value_3.append(phase_4)



    val = []

    for x in range (len(value_3)):
        score = int(value_3[x])
        if score < 11:
            below_11.append(score)
        if score > 10 and score < 21:
            below_21.append(score)
        if score > 20 and score < 31:
            below_31.append(score)
        if score > 30 and score < 41:
            below_41.append(score)
        if score > 40 and score < 51:
            below_51.append(score)
        if score > 50 and score < 61:
            below_61.append(score)
        if score > 60 and score < 71:
            below_71.append(score)
        if score > 70 and score < 81:
            below_81.append(score)
        if score > 80 and score < 91:
            below_91.append(score)
        if score > 90 and score < 101:
            below_101.append(score)


    data = [len(below_11),len(below_21),len(below_31),len(below_41),len(below_51),len(below_61),len(below_71),len(below_81),len(below_91),len(below_101)]
    labels = ['x < 11%','10% < x < 21%','20% < x < 31%','30% < x < 41%','40% < x < 51%','50% < x < 61%','60% < x < 71%','70% < x < 81%','80% < x < 91%','90% < x <= 100%']
    plt.xticks(range(len(data)), labels)
    plt.xticks(rotation=45,fontsize='9')
    plt.ylabel('Sample Pair That Has Similar Score Range')
    plt.xlabel('Score Range')
    plt.title('Samples With Similar SSDEEP Hash')
    plt.bar(range(len(data)), data)
    plt.savefig('report_gen/ssdeep.png',bbox_inches='tight',dpi=1000)
    plt.close(1)
    #plt.show()

def tlsh_hash(dir):
    #dir = input('File Path of Samples :')
    samples = os.listdir(dir)
    comb = combinations(samples,2)

    f = open('report_gen/similar_hash_1.txt','w+')
    f = open('report_gen/similar_hash_1.txt','r+')
    f.truncate(0)
    f = open('report_gen/similar_hash_1.txt','a+')

    f.write('-----------------------------------------\r\n')
    f.write('The TLSH Score For Each Pair of Samples\r\n')
    f.write('-----------------------------------------\r\n')

    all_score = []
    min_score = []
    med_score = []
    high_score = []

    for i in list(comb):
        full_dir = dir+i[0]
        full_dir_1 = dir+i[1]
        h1 = tlsh.hash(open(full_dir, 'rb').read())
        h2 = tlsh.hash(open(full_dir_1, 'rb').read())
        score = tlsh.diffxlen(h1, h2)
        if score < 11:
            min_score.append(score)

        elif score < 51 and score > 10:
            med_score.append(score)

        elif score < 1000 and score > 50:
            high_score.append(score)

        f.write(str(i[0])+' and '+str(i[1])+"\r\n")
        #print(i[0]+' and '+i[1])

        f.write('score: '+str(score)+'\r\n')
        #print('score: '+str(score))

        all_score.append(score)
        f.write(':::::::::::::::::::::::::::::::::\r\n')
        #print(':::::::::::::::::::::::::::::::::')



    data = [len(min_score),len(med_score),len(high_score)]
    labels = ['< 11 (very similar)', '10 < x < 50 (somewhat similar)', 'x>50 (not similar)' ]
    plt.xticks(range(len(data)), labels)
    plt.xticks(rotation=17,fontsize='9')
    plt.ylabel('Samples Pair That Has Similar Score Range')
    plt.xlabel('Score Range')
    plt.title('Samples With Similar TLSH Hash')
    plt.bar(range(len(data)), data)
    plt.savefig('report_gen/tlsh.png',bbox_inches='tight',dpi=1000)
    plt.close(1)
    #plt.show()



#tlsh_hash()
#ssdeep()
